/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Card } from "./components/cards";
export { Card } from "./components/cards";
export namespace Components {
    interface AppRoot {
    }
    interface CfMatchGame {
        "cards": Card[];
    }
}
export interface CfMatchGameCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCfMatchGameElement;
}
declare global {
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLCfMatchGameElementEventMap {
        "finished": number;
    }
    interface HTMLCfMatchGameElement extends Components.CfMatchGame, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCfMatchGameElementEventMap>(type: K, listener: (this: HTMLCfMatchGameElement, ev: CfMatchGameCustomEvent<HTMLCfMatchGameElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCfMatchGameElementEventMap>(type: K, listener: (this: HTMLCfMatchGameElement, ev: CfMatchGameCustomEvent<HTMLCfMatchGameElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCfMatchGameElement: {
        prototype: HTMLCfMatchGameElement;
        new (): HTMLCfMatchGameElement;
    };
    interface HTMLElementTagNameMap {
        "app-root": HTMLAppRootElement;
        "cf-match-game": HTMLCfMatchGameElement;
    }
}
declare namespace LocalJSX {
    interface AppRoot {
    }
    interface CfMatchGame {
        "cards"?: Card[];
        "onFinished"?: (event: CfMatchGameCustomEvent<number>) => void;
    }
    interface IntrinsicElements {
        "app-root": AppRoot;
        "cf-match-game": CfMatchGame;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "cf-match-game": LocalJSX.CfMatchGame & JSXBase.HTMLAttributes<HTMLCfMatchGameElement>;
        }
    }
}
